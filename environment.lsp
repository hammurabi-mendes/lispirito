(define map (lambda (func list)    (cond        ((eq? list '()) '())        (#t (cons (func (car list)) (map func (cdr list))))    )))
(define foldl (lambda (binfunc acc list)    (cond        ((eq? list '()) acc)        (#t (foldl binfunc (binfunc (car list) acc) (cdr list)))    )))
(define foldr (lambda (binfunc acc list)    (cond        ((eq? list '()) acc)        (#t (binfunc (car list) (foldr binfunc acc (cdr list))))    )))
(define filter (lambda (pred list)    (cond        ((eq? list '()) '())        ((pred (car list)) (cons (car list) (filter pred (cdr list))))        (#t (filter pred (cdr list)))    )))
(define length (lambda (l) (foldl (lambda (first acc) (+ 1 acc)) 0 l)))
(define reverse (lambda (l) (foldl cons '() l)))
(define append (lambda (l1 l2) (foldr cons l2 l1)))
(define list (lambda (. items) (foldl cons '() items)))
(define list? (lambda (input)    (cond        ((atom? input) #f)        ((eq? input '()) #t)        (#t (list? (cdr input)))    )))
(define abs (lambda (x) (if (> x 0) x (neg x))))
(define modulo (lambda (x m) (- x (* (/ x m) m))))
(define list->string (lambda (list)    (foldl (lambda (first acc) (string-append (make-string 1 first) acc)) "" (reverse list))))
(define string->list (lambda (str)    (cond        ((eq? str "") '())        (#t (cons (string-ref str 0) (string->list (substring str 1 (string-length str)))))    )))
(define apply (lambda (op . list) (foldl op (car list) (cdr list))))
(define string-ref (lambda (str pos)    (mem-read (+ (mem-addr str) pos))))
(define string-set! (lambda (str pos chr)    (mem-write (+ (mem-addr str) pos) chr)))
(define make-string (lambda (size init)    (begin        (define result (mem-fill (mem-alloc (+ size 1)) init size))        (mem-write (+ (mem-addr result) size) 0)        (data->string result)    )))
(define string-length (lambda (input)    (begin        (define (helper str cur)            (cond                ((eq? (mem-read (+ (mem-addr str) cur)) (integer->char 0)) 0)                (#t (+ 1 (helper str (+ cur 1))))            )        )        (helper input 0)    )))
(define string-append (lambda (str1 str2)    (begin        (define len1 (string-length str1))        (define len2 (string-length str2))        (define result (make-string (+ len1 len2) 0))        (mem-copy (mem-addr result) (mem-addr str1) len1)        (mem-copy (+ (mem-addr result) len1) (mem-addr str2) len2)        result    )))
(define substring (lambda (str start finish)    (begin        (define size (+ (- finish start) 1))        (define result (make-string size 0))        (mem-copy (mem-addr result) (+ (mem-addr str) start) size)        result    )))
(define pair (lambda (a b) (cons a (cons b '()))))
(define assoc-replace (lambda (key nval lst)    (foldr (lambda (cur acc) (if (eq? (car cur) key) (cons (pair key nval) acc) (cons cur acc))) '() lst)))
(define assoc-delete (lambda (key nval lst)    (foldr (lambda (cur acc) (if (eq? (car cur) key) acc (cons cur acc))) '() lst)))
(define if (macro (test if_clause else_clause)    (cond (test if_clause) (#t else_clause))))
(define let (macro (bindings expression)    (begin        (define old_env (current-environment))        (define (appender binding cur_env) (begin            (define p1 (car binding))            (define p2 (car (cdr binding)))            (cons (pair p1 (eval p2 old_env)) cur_env)        ))        (define new_env (foldl appender old_env (quote bindings)))        (eval (quote expression) new_env)    )))
(define let* (macro (bindings expression)    (begin        (define old_env (current-environment))        (define (appender binding cur_env) (begin            (define p1 (car binding))            (define p2 (car (cdr binding)))            (cons (pair p1 (eval p2 cur_env)) cur_env)         ))        (define new_env (foldl appender old_env (quote bindings)))        (eval (quote expression) new_env)    )))
(define letrec (macro (bindings expression)    (begin        (define old_env (current-environment))        (define (appender binding cur_env) (begin            (define p1 (car binding))            (define p2 (car (cdr binding)))            (cons (pair p1 p2) cur_env)         ))        (define (setter binding cur_env) (begin            (define p1 (car binding))            (define p2 (car (cdr binding)))            (assoc-replace p1 (eval p2 cur_env) cur_env)        ))        (define tmp_env (foldl appender old_env (quote bindings)))        (define new_env (foldl setter tmp_env (quote bindings)))        (eval (quote expression) new_env)    )))
